{
    parserClass = "org.jonahhenriksson.ron.language.parser._RONParser"
    parserUtilClass = "org.jonahhenriksson.ron.language.psi.RONParserUtil"

    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix = "RON"
    psiImplClassSuffix = "Impl"
    psiPackage = "org.jonahhenriksson.ron.language.psi"
    psiImplPackage = "org.jonahhenriksson.ron.language.psi.impl"

    elementTypeHolderClass = "org.jonahhenriksson.ron.language.psi.RONTypes"
    elementTypeClass = "org.jonahhenriksson.ron.language.psi.RONElementType"
    tokenTypeClass = "org.jonahhenriksson.ron.language.psi.RONTokenType"

    psiImplUtilClass = "org.jonahhenriksson.ron.language.psi.impl.RONPsiImplUtil"

    tokens = [
        COMMENT = "regexp://.*"

        BOOLEAN = "regexp:true|false"

        IDENT = "regexp:[A-Za-z_]+"

        INTEGER = "regexp:[+-]?((0x[0-9A-Fa-f][0-9A-Fa-f_]*)|((0[bo]?)?[0-9][0-9_]*))"
        FLOAT = "regexp:([+-]?[0-9]+\.[0-9]*([Ee][0-9]+)?)|(\.[0-9]+([Ee][0-9]+)?)"

        CHAR = "regexp:'([ -&(-\[\]-~])|(\\')|(\\\\)'"
        STRING = "regexp:\"([^\r\n\"]|(\\[\S]))*\""

        EXTENSION = "regexp:#!\[enable\([A-Za-z_]+\)\]"
        PARENTHESISL = "("
        PARENTHESISR = ")"
        BRACKETL = "["
        BRACKETR = "]"
        BRACEL = "{"
        BRACER = "}"
        COLON = ":"
        COMMA = ","
        SOME = "Some"
    ]
}

// RON File
RON ::= [extension+] value;

// Extension
private extension ::= EXTENSION;

// Values
value ::= bool | integer | float | string | char | option | list | map | named_field | object;

// Bool
bool ::= BOOLEAN;

// Integer
private integer ::= INTEGER;

// Float
private float ::= FLOAT;

// String
private string ::= STRING | RAW_STRING;

// Char
private char ::= CHAR;

// Option
option ::= SOME PARENTHESISL value PARENTHESISR;

// List
list ::= BRACKETL [value (COMMA value)* [COMMA]] BRACKETR;

// Map
map ::= BRACEL [map_entry (COMMA map_entry)*  [COMMA]] BRACER
map_entry ::= value COLON value;

// Named Field for Struct
named_field ::= IDENT COLON value;

// Tuple + Enum Tuple + Tuple Struct + Struct + Unit Struct + Named Enum
object ::= [IDENT] PARENTHESISL [value (COMMA value)* [COMMA]] PARENTHESISR | PARENTHESISL PARENTHESISR | IDENT;